\set ON_ERROR_STOP on

CREATE SCHEMA fn;

CREATE OR REPLACE FUNCTION fn.normalize(input int8) RETURNS real AS $$/*
  Normalizes a number to fall between 0 and 1.
*/
  SELECT (input + 2147483648) / 4294967296.0;
$$ LANGUAGE sql;

CREATE OR REPLACE FUNCTION fn.hash_rand(seed int8) RETURNS real AS $$/*
  Return a seemingly-random (but deterministic) number between 0 and 1
  based on an integer input seed.
*/
  SELECT fn.normalize(hashint8(seed));
$$ LANGUAGE sql;

CREATE OR REPLACE FUNCTION fn.gen_rand_contact_info_id_lag(seed int8) RETURNS int AS $$
  SELECT CASE
    WHEN r > 0.5 THEN 2
    ELSE 0
  END
  FROM (SELECT fn.hash_rand(seed) AS r) val;
$$ LANGUAGE sql;

CREATE OR REPLACE FUNCTION fn.gen_rand_location_type_id(seed int8) RETURNS int AS $$
  SELECT CASE
    WHEN r > 0.4 THEN 1 -- home
    WHEN r > 0.2 THEN 2 -- work
    ELSE 3              -- other
  END
  FROM (SELECT fn.hash_rand(seed) AS r) val;
$$ LANGUAGE sql;

CREATE SCHEMA movie_rentals;
SET search_path = movie_rentals;

CREATE TABLE cast_roles (
  id int8 PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  movie int8 NOT NULL,
  person int8 NOT NULL,
  character_name text
);
CREATE TABLE crew_roles (
  id int8 PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  movie int8 NOT NULL,
  person int8 NOT NULL,
  department text,
  job text
);
CREATE TABLE customers (
  id int8 PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  full_name text NOT NULL,
  notes text
);
CREATE TABLE emails (
  id int8 PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  customer int8 NOT NULL,
  email text NOT NULL,
  location_type int8,
  weight int4,
  UNIQUE (email, customer)
);
CREATE TABLE genres (
  id int8 PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  name text UNIQUE NOT NULL
);
CREATE TABLE items (
  id int8 PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  barcode uuid UNIQUE DEFAULT gen_random_uuid() NOT NULL,
  movie int8 NOT NULL,
  store int8 NOT NULL
);
CREATE TABLE location_types (
  id int8 PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  name text NOT NULL UNIQUE
);
CREATE TABLE movies (
  id int8 PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  title text NOT NULL,
  overview text,
  release_date date,
  lang text,
  rating text,
  popularity float4,
  vote_count int4,
  vote_average float4,
  budget int8,
  revenue int8,
  runtime int4
);
CREATE TABLE movies_genres (
  id int8 PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  movie int4 NOT NULL,
  genre int4 NOT NULL,
  UNIQUE (movie, genre)
);
CREATE TABLE movies_studios (
  id int8 PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  movie int8 NOT NULL,
  studio int8 NOT NULL,
  UNIQUE (movie, studio)
);
CREATE TABLE people (
  id int8 PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  name text NOT NULL,
  also_known_as _text NOT NULL DEFAULT '{}',
  birth_date date,
  death_date date,
  popularity float4,
  imdb_id text,
  biography text
);
CREATE TABLE phones (
  id int8 PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  customer int8 NOT NULL,
  phone text NOT NULL,
  location_type int8,
  weight int4,
  UNIQUE (phone, customer)
);
CREATE TABLE rentals (
  id int8 PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  customer int8 NOT NULL,
  item int8 NOT NULL,
  price numeric(10, 2) NOT NULL,
  time_out timestamptz NOT NULL,
  time_in timestamptz
);
CREATE TABLE stores (
  id int8 PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  street_name text,
  phone text
);
CREATE TABLE studios (
  id int8 PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  name text NOT NULL
);


INSERT INTO cast_roles (movie, person, character_name)
SELECT film_id, person_id, film_character FROM bluebox.film_cast;

INSERT INTO crew_roles (movie, person, department, job)
SELECT film_id, person_id, department, job FROM bluebox.film_crew;

INSERT INTO customers (id, full_name)
SELECT customer_id, full_name FROM bluebox.customer;

INSERT INTO emails (customer, email, location_type)
SELECT
  -- Pseudo-randomly lag the customer_id to shuffle the emails slightly. This
  -- makes it so that most customers have one email, some customers have two
  -- emails, a few customers have three, and some have none.
  COALESCE(
    lag(
      customer_id,
      fn.gen_rand_contact_info_id_lag(customer_id + 9000)
    ) OVER (ORDER BY customer_id),
    customer_id
  ) AS new_id,
  email,
  fn.gen_rand_location_type_id(customer_id + 9000)
FROM bluebox.customer;
WITH u AS (
  SELECT
    id,
    ROW_NUMBER() OVER (PARTITION BY customer ORDER BY id) AS weight
  FROM emails
)
UPDATE emails SET weight = u.weight
FROM u WHERE emails.id = u.id;

INSERT INTO genres (id, name)
SELECT genre_id, name FROM bluebox.film_genre;

INSERT INTO items (id, movie, store)
SELECT inventory_id, film_id, store_id FROM bluebox.inventory;

INSERT INTO location_types (id, name) VALUES
  (1, 'home'),
  (2, 'work'),
  (3, 'other');

INSERT INTO movies (
  id,
  title,
  overview,
  release_date,
  lang,
  rating,
  popularity,
  vote_count,
  vote_average,
  budget,
  revenue,
  runtime
)
SELECT
  film_id,
  title,
  overview,
  release_date,
  original_language,
  rating,
  popularity,
  vote_count,
  vote_average,
  budget,
  revenue,
  runtime
FROM bluebox.film;
UPDATE movies SET budget = NULL WHERE budget = 0;
UPDATE movies SET revenue = NULL WHERE revenue = 0;
UPDATE movies SET runtime = NULL WHERE runtime = 0;

INSERT INTO movies_genres (movie, genre)
SELECT film_id, unnest(genre_ids) FROM bluebox.film;

INSERT INTO movies_studios (movie, studio)
SELECT film_id, production_company_id FROM bluebox.film_production_company;

INSERT INTO people (
  id,
  name,
  also_known_as,
  birth_date,
  death_date,
  popularity,
  imdb_id,
  biography
)
SELECT
  person_id,
  name,
  also_known_as,
  birth_date,
  death_date,
  popularity,
  imdb_id,
  biography
FROM bluebox.person;

INSERT INTO phones (customer, phone, location_type)
SELECT
  -- Pseudo-randomly lag the customer_id to shuffle the phones slightly. This
  -- makes it so that most customers have one phone, some customers have two
  -- phones, a few customers have three, and some have none.
  COALESCE(
    lag(
      customer_id,
      fn.gen_rand_contact_info_id_lag(customer_id + 6000)
    ) OVER (ORDER BY customer_id),
    customer_id
  ) AS new_id,
  phone,
  fn.gen_rand_location_type_id(customer_id + 6000)
FROM bluebox.customer;
WITH u AS (
  SELECT
    id,
    ROW_NUMBER() OVER (PARTITION BY customer ORDER BY id) AS weight
  FROM phones
)
UPDATE phones SET weight = u.weight
FROM u WHERE phones.id = u.id;

INSERT INTO rentals (id, customer, item, price, time_out, time_in)
SELECT
  r.rental_id,
  r.customer_id,
  r.inventory_id,
  CASE
    WHEN f.release_date > '2023-01-01' THEN 2.99 -- new releases
    WHEN f.release_date > '2018-01-01' THEN 1.99 -- recent releases
    ELSE 0.99                                    -- old releases
  END AS price,
  lower(r.rental_period),
  upper(r.rental_period)
FROM bluebox.rental r
JOIN bluebox.inventory i ON r.inventory_id = i.inventory_id
JOIN bluebox.film f ON i.film_id = f.film_id;



INSERT INTO stores (id, street_name, phone)
SELECT
  store_id,
  street_name,
  phone
FROM bluebox.store;
-- Get rid of empty strings in stores table
UPDATE stores SET street_name = 'Centre St' WHERE id = 3;
UPDATE stores SET street_name = 'Perkins St' WHERE id = 6;
UPDATE stores SET street_name = 'Amory St' WHERE id = 10;
UPDATE stores SET street_name = 'Lamartine St' WHERE id = 12;
UPDATE stores SET street_name = 'South St' WHERE id = 17;
UPDATE stores SET street_name = 'Pond St' WHERE id = 42;
UPDATE stores SET street_name = 'Washington St' WHERE id = 57;
UPDATE stores SET street_name = 'Saint Rose St' WHERE id = 60;
UPDATE stores SET street_name = 'Forest Hills St' WHERE id = 77;
UPDATE stores SET street_name = 'Arborway' WHERE id = 81;
UPDATE stores SET street_name = 'Seaverns Ave' WHERE id = 89;
UPDATE stores SET street_name = 'Chestnut Ave' WHERE id = 92;
UPDATE stores SET street_name = 'Boylston Ave' WHERE id = 97;
UPDATE stores SET street_name = 'Beaufort Rd' WHERE id = 119;
UPDATE stores SET street_name = 'Green St' WHERE id = 134;
UPDATE stores SET street_name = 'Spring Park Ave' WHERE id = 190;
UPDATE stores SET street_name = 'Greenough Ave' WHERE id = 191;

INSERT INTO studios (id, name)
SELECT production_company_id, production_company_name
FROM bluebox.production_company;

-- Make Galaxy Quest have id 1! üòé
UPDATE movies SET id = 1 WHERE title = 'Galaxy Quest'; -- Was 926
UPDATE cast_roles SET movie = 1 WHERE movie = 926;
UPDATE crew_roles SET movie = 1 WHERE movie = 926;
UPDATE movies_studios SET movie = 1 WHERE movie = 926;
UPDATE movies_genres SET movie = 1 WHERE movie = 926;

-- Galaxy Quest has no items (and thus no rentals)! ‚òπÔ∏è
--
-- Steal the items (and related rentals) from the movie "Fast X" (id 385687)
-- which happens to have the most rentals. Re-assign this to Galaxy Quest
-- instead! üòé
UPDATE items SET movie = 1 WHERE movie = 385687;

-- Update sequences
SELECT setval(pg_get_serial_sequence('cast_roles', 'id'), MAX(id) + 1, false) FROM cast_roles;
SELECT setval(pg_get_serial_sequence('crew_roles', 'id'), MAX(id) + 1, false) FROM crew_roles;
SELECT setval(pg_get_serial_sequence('customers', 'id'), MAX(id) + 1, false) FROM customers;
SELECT setval(pg_get_serial_sequence('emails', 'id'), MAX(id) + 1, false) FROM emails;
SELECT setval(pg_get_serial_sequence('genres', 'id'), MAX(id) + 1, false) FROM genres;
SELECT setval(pg_get_serial_sequence('items', 'id'), MAX(id) + 1, false) FROM items;
SELECT setval(pg_get_serial_sequence('location_types', 'id'), MAX(id) + 1, false) FROM location_types;
SELECT setval(pg_get_serial_sequence('movies', 'id'), MAX(id) + 1, false) FROM movies;
SELECT setval(pg_get_serial_sequence('movies_genres', 'id'), MAX(id) + 1, false) FROM movies_genres;
SELECT setval(pg_get_serial_sequence('movies_studios', 'id'), MAX(id) + 1, false) FROM movies_studios;
SELECT setval(pg_get_serial_sequence('people', 'id'), MAX(id) + 1, false) FROM people;
SELECT setval(pg_get_serial_sequence('phones', 'id'), MAX(id) + 1, false) FROM phones;
SELECT setval(pg_get_serial_sequence('rentals', 'id'), MAX(id) + 1, false) FROM rentals;
SELECT setval(pg_get_serial_sequence('stores', 'id'), MAX(id) + 1, false) FROM stores;
SELECT setval(pg_get_serial_sequence('studios', 'id'), MAX(id) + 1, false) FROM studios;


ALTER TABLE cast_roles ADD CONSTRAINT cast_roles_movie_fkey
FOREIGN KEY (movie) REFERENCES movies (id);

ALTER TABLE cast_roles ADD CONSTRAINT cast_roles_person_fkey
FOREIGN KEY (person) REFERENCES people (id);

ALTER TABLE crew_roles ADD CONSTRAINT crew_roles_movie_fkey
FOREIGN KEY (movie) REFERENCES movies (id);

ALTER TABLE crew_roles ADD CONSTRAINT crew_roles_person_fkey
FOREIGN KEY (person) REFERENCES people (id);

ALTER TABLE emails ADD CONSTRAINT emails_customer_fkey
FOREIGN KEY (customer) REFERENCES customers (id);

ALTER TABLE emails ADD CONSTRAINT emails_location_type_fkey
FOREIGN KEY (location_type) REFERENCES location_types (id);

ALTER TABLE items ADD CONSTRAINT items_movie_fkey
FOREIGN KEY (movie) REFERENCES movies (id);

ALTER TABLE items ADD CONSTRAINT items_store_fkey
FOREIGN KEY (store) REFERENCES stores (id);

ALTER TABLE movies_genres ADD CONSTRAINT movies_genres_movie_fkey
FOREIGN KEY (movie) REFERENCES movies (id);

ALTER TABLE movies_genres ADD CONSTRAINT movies_genres_genre_fkey
FOREIGN KEY (genre) REFERENCES genres (id);

ALTER TABLE movies_studios ADD CONSTRAINT movies_studios_movie_fkey
FOREIGN KEY (movie) REFERENCES movies (id);

ALTER TABLE movies_studios ADD CONSTRAINT movies_studios_studio_fkey
FOREIGN KEY (studio) REFERENCES studios (id);

ALTER TABLE phones ADD CONSTRAINT phones_customer_fkey
FOREIGN KEY (customer) REFERENCES customers (id);

ALTER TABLE phones ADD CONSTRAINT phones_location_type_fkey
FOREIGN KEY (location_type) REFERENCES location_types (id);

ALTER TABLE rentals ADD CONSTRAINT rentals_customer_fkey
FOREIGN KEY (customer) REFERENCES customers (id);

ALTER TABLE rentals ADD CONSTRAINT rentals_item_fkey
FOREIGN KEY (item) REFERENCES items (id);

